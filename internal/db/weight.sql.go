// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: weight.sql

package db

import (
	"context"
	"database/sql"
)

const addWeightEntry = `-- name: AddWeightEntry :one
INSERT INTO weights (
    id, date, weight, weight_unit, note
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, date, weight, weight_unit, note
`

type AddWeightEntryParams struct {
	ID         string         `json:"id"`
	Date       string         `json:"date"`
	Weight     float64        `json:"weight"`
	WeightUnit string         `json:"weight_unit"`
	Note       sql.NullString `json:"note"`
}

func (q *Queries) AddWeightEntry(ctx context.Context, arg AddWeightEntryParams) (Weight, error) {
	row := q.db.QueryRowContext(ctx, addWeightEntry,
		arg.ID,
		arg.Date,
		arg.Weight,
		arg.WeightUnit,
		arg.Note,
	)
	var i Weight
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Weight,
		&i.WeightUnit,
		&i.Note,
	)
	return i, err
}

const addWeightsUsersEntry = `-- name: AddWeightsUsersEntry :exec
INSERT INTO users_weights (
    user_id,
    weight_id
) VALUES (
    ?, ?
)
`

type AddWeightsUsersEntryParams struct {
	UserID   string `json:"user_id"`
	WeightID string `json:"weight_id"`
}

func (q *Queries) AddWeightsUsersEntry(ctx context.Context, arg AddWeightsUsersEntryParams) error {
	_, err := q.db.ExecContext(ctx, addWeightsUsersEntry, arg.UserID, arg.WeightID)
	return err
}

const deleteAllUserWeights = `-- name: DeleteAllUserWeights :exec
DELETE FROM 
    weights
WHERE
    id IN (
        SELECT users_weights.weight_id
        FROM users_weights
        WHERE users_weights.user_id = ?
    )
`

func (q *Queries) DeleteAllUserWeights(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAllUserWeights, userID)
	return err
}

const deleteUserWeight = `-- name: DeleteUserWeight :exec
DELETE FROM 
    weights
WHERE
    id = ?
`

func (q *Queries) DeleteUserWeight(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserWeight, id)
	return err
}

const deleteWeightData = `-- name: DeleteWeightData :exec
DELETE FROM weights
`

func (q *Queries) DeleteWeightData(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteWeightData)
	return err
}

const getAllUserWeights = `-- name: GetAllUserWeights :many
SELECT
    weights.id, 
    weights.date, 
    weights.weight, 
    weights.weight_unit, 
    weights.note
FROM 
    users
JOIN
    users_weights ON users.id = users_weights.user_id
JOIN
    weights ON users_weights.weight_id = weights.id
WHERE
    users.username = ?
`

func (q *Queries) GetAllUserWeights(ctx context.Context, username string) ([]Weight, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserWeights, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weight
	for rows.Next() {
		var i Weight
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Weight,
			&i.WeightUnit,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDFromWeightID = `-- name: GetUserIDFromWeightID :one
SELECT
    user_id
FROM
    users_weights
WHERE
    weight_id = ?
`

func (q *Queries) GetUserIDFromWeightID(ctx context.Context, weightID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIDFromWeightID, weightID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getWeightEntry = `-- name: GetWeightEntry :one
SELECT
    id, date, weight, weight_unit, note
FROM 
    weights
WHERE
    id = ?
`

func (q *Queries) GetWeightEntry(ctx context.Context, id string) (Weight, error) {
	row := q.db.QueryRowContext(ctx, getWeightEntry, id)
	var i Weight
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Weight,
		&i.WeightUnit,
		&i.Note,
	)
	return i, err
}
